apiVersion: v1
kind: Service
metadata:
  name: app
spec:
  selector:
    app: app
  ports:
  - name: http
    port: 8000
    targetPort: 8000
  type: ClusterIP

# creates a deployment for app
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: app
  template:
    metadata:
      labels:
        app: app
    spec:
      containers:
      - name: app
        image: javis2161/flask-hdo3:hellodevops3-app
        command: ["gunicorn", "--bind", "0.0.0.0:8000", "app.wsgi:app"]
        ports:
        - name: http
          containerPort: 8000
        imagePullPolicy: Always
        env:
        - name: VAULT_ADDR
          value: "http://vault:8200"
      - name: vault
        image: vault
        ports:
        - containerPort: 8200
        env:
        - name: VAULT_DEV_ROOT_TOKEN_ID
          value: "root"
        - name: VAULT_DEV_LISTEN_ADDRESS
          value: "0.0.0.0:8200"
        volumeMounts:
        - name: secrets-volume
          mountPath: "/etc/secrets"
          readOnly: true
      volumes:
      - name: secrets-volume
        secret:
          secretName: my-secrets



# creates a service for nginx
---
apiVersion: v1
kind: Service
metadata:
  name: nginx
spec:
  selector:
    app: nginx
  ports:
  - name: http
    port: 80
    targetPort: 80
  type: LoadBalancer

# creates a ConfigMap for nginx and mounts the configuration file
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
data:
  default.conf: |
    upstream flask-app {
        server app:8000;
    }

    server {
        listen 80;
        server_name localhost;

        location / {
            proxy_pass http://flask-app;
            proxy_set_header Host "localhost";
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_redirect off;
        }
    }
---
# creates a deployment for nginx and mounts the configuration file from the ConfigMap
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:latest
        volumeMounts:
        - name: config
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: default.conf
        ports:
        - name: http
          containerPort: 80
        imagePullPolicy: Always
      volumes:
      - name: config
        configMap:
          name: nginx-config

# creates a NetworkPolicy with traffic restrictions
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: my-network
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: nginx
    ports:
    - protocol: TCP
      port: 80
  - from:
    - podSelector:
        matchLabels:
          app: app
    ports:
    - protocol: TCP
      port: 8000
  - from:
    - podSelector:
        matchLabels:
          app: vault
    ports:
    - protocol: TCP
      port: 8200

---
apiVersion: v1
kind: Service
metadata:
  name: vault
spec:
  selector:
    app: app
    component: vault
  ports:
  - name: http
    port: 8200
    targetPort: 8200

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vault
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vault
  template:
    metadata:
      labels:
        app: vault
    spec:
      containers:
        - name: vault
          image: vault
          env:
            - name: VAULT_DEV_ROOT_TOKEN_ID
              value: myroot
            - name: VAULT_DEV_LISTEN_ADDRESS
              value: 0.0.0.0:8200
          ports:
            - name: http
              containerPort: 8200
          volumeMounts:
            - name: vault-data
              mountPath: /vault/file

      volumes:
        - name: vault-data
          emptyDir: {}
---

apiVersion: v1
kind: Pod
metadata:
  name: artifactory-pod
spec:
  containers:
  - name: artifactory
    image: releases-docker.jfrog.io/jfrog/artifactory-pro:latest
    ports:
      - containerPort: 8081
      - containerPort: 8082
    volumeMounts:
      - name: artifactory-data
        mountPath: /var/opt/jfrog/artifactory
  volumes:
  - name: artifactory-data
    emptyDir: {}
---
apiVersion: v1
kind: Pod
metadata:
  name: create-secret
spec:
  containers:
    - name: create-secret
      image: vault
      command: ["vault"]
      args: ["kv", "put", "secret/myapp/config", "username=myuser", "password=mypassword"]
      env:
        - name: VAULT_ADDR
          value: "http://vault:8200"
        - name: VAULT_TOKEN
          value: "root"
      securityContext:
        capabilities:
          add:
            - IPC_LOCK
  networks:
    - name: my-network

